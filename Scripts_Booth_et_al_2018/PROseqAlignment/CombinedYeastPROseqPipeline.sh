#source  ~/.bash_profile
#====================
#PRO-seq shell script
#Modified for simultaneous mapping of spiked in organism data
#Ver. 2.0	     
#====================
#==========================================================================================================================================
#Ingredients					      
#1. Your FASTA, rDNA (ebwt), genome (ebwt) *ebwt can be generated by doing "bowtie-build infile outfile"*  				      
#2. One python script: passfilter.py
#3. fastx_tools					      
#4. bowtie					      
#5. Samtools
#6. BEDTools				              
#===========================================================================================================================================
#Usage
#1. Input file path of necessary files and scripts
#2. Run the script by "sh SCRIPTPATH"
#NOTE: If error arises in quality filter, change -o to -q 
#(optional) if no rDNA, 
#hashtag or remove all the lines in between "++++++++++++++" 
#AND hashtage or remove one "done" in the end of the script
#===========================================================================================================================================
#Input
fastq="
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26971_HJ72CBGXX_pombe_WT_rep1_DMSO_ATCACG_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26972_HJ72CBGXX_pombe_WT_rep1_3MB-PPI_CGATGT_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26973_HJ72CBGXX_pombe_mcs6as_rep1_DMSO_TTAGGC_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26974_HJ72CBGXX_pombe_mcs6as_rep1_3MB-PPI_TGACCA_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26975_HJ72CBGXX_pombe_CDK9as_rep1_DMSO_ACAGTG_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26976_HJ72CBGXX_pombe_CDK9as_rep1_3MB-PPI_GCCAAT_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26977_HJ72CBGXX_pombe_WT_COMBINED_DMSO_CAGATC_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26977_HJ72CBGXX_pombe_WT_rep2_DMSO_CAGATC_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26978_HJ72CBGXX_pombe_WT_COMBINED_3MB-PPI_ACTTGA_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26978_HJ72CBGXX_pombe_WT_rep2_3MB-PPI_ACTTGA_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26979_HJ72CBGXX_pombe_mcs6as_COMBINED_DMSO_GATCAG_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26979_HJ72CBGXX_pombe_mcs6as_rep2_DMSO_GATCAG_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26980_HJ72CBGXX_pombe_mcs6as_COMBINED_3MB-PPI_TAGCTT_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26980_HJ72CBGXX_pombe_mcs6as_rep2_3MB-PPI_TAGCTT_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26981_HJ72CBGXX_pombe_CDK9as_COMBINED_DMSO_GGCTAC_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26981_HJ72CBGXX_pombe_CDK9as_rep2_DMSO_GGCTAC_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26982_HJ72CBGXX_pombe_CDK9as_COMBINED_3MB-PPI_CTTGTA_R1.fastq
/home/macproadmin/users/Greg/FisherCollaboration/fastq/5993_7157_26982_HJ72CBGXX_pombe_CDK9as_rep2_3MB-PPI_CTTGTA_R1.fastq
"

SpikeInrDNA="/home/macproadmin/users/GROseq_Utils/refGenomes/Cerevisiae_S288C/rDNA/rDNA"

rDNA="/home/macproadmin/users/GROseq_Utils/refGenomes/pombe/rRNA/Pombe_rRNA.fa"

genome="/home/macproadmin/users/GROseq_Utils/refGenomes/CombinedGenomes/Cerevisiae_Pombe/Combined_SC_SP_genomes"

Combinedchrominfo="/home/macproadmin/users/GROseq_Utils/annotations/CombinedGenomes/Cerevisiae_Pombe/SC_SPcombinedChrSizes.txt"

SCchrominfo="/home/macproadmin/users/GROseq_Utils/annotations/sacCer3/SacCerChr.sizes_forPipeline.txt"

passfilter="/home/macproadmin/users/GROseq_Utils/Processing_Scripts/PROSEQ/pipeline/passfilter.py"

SPchrominfo="/home/macproadmin/users/GROseq_Utils/annotations/pombe/PombeChrSizes_forPipeline.txt"
#chrominfo format example = chr1 52949123 (with no title)

bgToBigWig="/home/macproadmin/users/GROseq_Utils/mkbigWig/bedGraphToBigWig"

nmer="36"

### stuff for ngs plot

organisms="sacCer3 Asm85v1"

region="tss genebody"
#===========================================================================================================================================


for file in ${fastq}
do
for pf in ${passfilter}
do
for nmer in ${nmer}
do


#wc -l ${file} > ${file}wc.log
#z=$(awk '{ c=$1; print c/4}' ${file}wc.log)
#echo fastq: $z lines
#rm ${file}wc.log


echo ${file} passfiltering...

#Takes the fastq file and makes _q.tmp file with reads that passed the quality filter which is all the "N" and discarding all the "Y" quality reads.
python ${pf} ${file} _q.tmp

#wc -l _q.tmp > _q.tmpwc.log
#z=$(awk '{ c=$1; print c/4}' _q.tmpwc.log)
#echo after passfilter: $z lines
#rm _q.tmpwc.log


echo ${file} clipping...

#Takes _q.temp file and clips any residual 3'adapter sequence which could be all or part of TGGAATTCTCGGGTGCCAAGG and generated anothe temporary file called _c.tmp
fastx_clipper -i _q.tmp -o _c.tmp -a TGGAATTCTCGGGTGCCAAGG -l 15   

cat _c.tmp | awk '{if(NR%4==2) print length($1)}' > {file%%.*}_clipLength.txt
cat input.txt | sort -n | uniq -c | awk '{print $2 " " $1}' > {file%%.*}_clipLengthCounts.txt
rm {file%%.*}_clipLength.txt
#wc -l _c.tmp > _c.tmpwc.log
#z=$(awk '{ c=$1; print c/4}' _c.tmpwc.log)
#echo after clipping: $z lines
#rm _c.tmpwc.log
#rm _q.tmp


echo ${file} trimming...

#Takes _c.tmp file and trims sequences to set number of bases.
fastx_trimmer -l ${nmer} -i _c.tmp -o _c1.tmp

#wc -l _c1.tmp > _c1.tmpwc.log
#z=$(awk '{ c=$1; print c/4}' _c1.tmpwc.log)
#echo after trimming: $z lines
#rm _c1.tmpwc.log
rm _c.tmp


echo ${file} reverse complementing...

#Takes the _c1.tmp file and flips the read because the illumnia sequences the DNA from 5'end so the adapters in PRO-seq is reversed.
fastx_reverse_complement -i _c1.tmp -o _3.tmp    

#wc -l _3.tmp > _3.tmpwc.log
#z=$(awk '{ c=$1; print c/4}' _3.tmpwc.log)
#echo after reverse complement $z lines
#rm _3.tmpwc.log

rm _c1.tmp


#+++++++++++++++++++++++++++++++++++++++++++++++++++++HASHTAG IF NO rDNA+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

for rib in ${SpikeInrDNA}
do

echo ${file} aligning to SpikeInribosomal DNA...

#Generate 3 files: ribUnalign (not aligned to rDNA sequences), ribAlign (aligned to rDNA), _rib.log (bowtie stats)
#bowtie -p3 -v2 -M1 -q --sam --un ${file}_ribUnalign ${rib} _3.tmp ${file}_ribAlign 2>&1| tee ${file}_rib.log   
bowtie -p3 -k2 -m1 -q --sam --un ${file}_SpikeInribUnalign ${rib} _3.tmp ${file}_SpikeInribAlign 2>&1| tee ${file}SpikeIn_rib.log      
#cp -avr ${file}_ribAlign /home/macproadmin/users/Greg/Ribosom_alignFiles/
rm ${file}_SpikeInribAlign

#+++++++++++++++++++++++++++++++++++++++++++++++++++++HASHTAG IF NO rDNA+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 


for rib in ${rDNA}
do

echo ${file} aligning to ribosomal DNA...

#Generate 3 files: ribUnalign (not aligned to rDNA sequences), ribAlign (aligned to rDNA), _rib.log (bowtie stats)
#bowtie -p3 -v2 -M1 -q --sam --un ${file}_ribUnalign ${rib} _3.tmp ${file}_ribAlign 2>&1| tee ${file}_rib.log   
bowtie -p3 -k2 -m1 -q --sam --un ${file}_ribUnalign ${rib} ${file}_SpikeInribUnalign ${file}_ribAlign 2>&1| tee ${file}_rib.log      
#cp -avr ${file}_ribAlign /home/macproadmin/users/Greg/Ribosom_alignFiles/
rm ${file}_ribAlign

#+++++++++++++++++++++++++++++++++++++++++++++++++++++HASHTAG IF NO rDNA+++++++++++++++++++++++++++++++++++++++++++++++++++++++++


for gen in ${genome}
do

echo ${file} aligning to genome...

#Generate 3 files: Unalign (not aligned to genome), Align (aligned to genome), _gen.log (bowtie stats)
#SAM format data is output from aligners that read FASTQ files and assign the sequences to a position with respect to a known reference genome.
bowtie -p3 -v2 -m1 -q --sam --un ${file}_Unalign ${gen} ${file}_ribUnalign ${file}_Align.sam 2>&1| tee ${file}_gen.log     

echo ${file} converting SAM to BED...

rm ${file}_ribUnalign
rm ${file}_Unalign


#Converts SAM to BED
#BED - chr chrstart chrend strand etc
#BED file lists out every read.
samtools view ${file}_Align.sam -S -b | bamToBed -i stdin > ${file}.bed

#cp -avr ${file}_Align.sam /home/macproadmin/users/Greg/yeast_SAMfiles  
#rm ${file}_Align.sam


##  Converts SAM to BAM file then sorts and indexes the .bam file
##  The Sorted indexed BAM files will be used to generate ngsPlots
samtools view -Sb ${file}_Align.sam > ${file%%.*}_Align.bam
echo sorting ${file%%.*}_Align.bam
samtools sort ${file%%.*}_Align.bam ${file%%.*}_Align_sorted 
echo indexing ${file%%.*}_Align_sorted.bam 
samtools index ${file%%.*}_Align_sorted.bam 

rm ${file%%.*}_Align.sam
rm ${file%%.*}_Align.bam

##  Use ngsplot tools to generate metaplots for both organsims from a single BAM (contains info for both organisms).

#for org in ${organisms} 
#do 
#for reg in ${region} 
#do 
#echo plotting ${org} data around ${reg} from ${file%%.*}_Align_sorted.bam
#ngs.plot.r -G hg19 -R ${reg} -C ${file%%.*}_Align_sorted.bam -O ${file%%.*}_${reg}Out -F rnaseq -L 1000 -FL 36
#done
#done


for chr in ${Combinedchrominfo}
do

#Converts BED to Sorted Bed using command line arguments
#sorts by chromosome
#Bedgraph file shows how many reads are present in each base position/
echo Sorting BED...
sort -k 1,1 -k2,2n ${file}.bed > ${file}_Combined_sorted.bed

# for splitting the sorted.bed file based on chromosomes for each organism

SC_chro=$(awk '{print $1}' ${SCchrominfo})
SP_chro=$(awk '{print $1}' ${SPchrominfo})


### IMPORTANT Note:  The steps below write repeatedly to the separated bed files.  Therefor, if you rerun this script without deleting or moving these files, they will be added to instead of overwritten. #######

for SCchr in ${SC_chro}
do
awk '$1=="'${SCchr}'" {print $0}' ${file}_Combined_sorted.bed >> ${file}_cerevisiae.bed 
sort -k 1,1 -k2,2n ${file}_cerevisiae.bed > ${file}_cerevisiae_sorted.bed
done
for SPchr in ${SP_chro}
do
awk '$1=="'${SPchr}'" {print $0}' ${file}_Combined_sorted.bed >> ${file}_pombe.bed
sort -k 1,1 -k2,2n ${file}_pombe.bed > ${file}_pombe_sorted.bed
done 

echo Number of reads mapping to S. cerevisiae genome: 
wc -l ${file}_cerevisiae_sorted.bed
echo Number of reads mapping to S. pombe genome: 
wc -l ${file}_pombe_sorted.bed


#Generate non-nomalized Bedgraphs 
#bedgraph - chr chrstart chrend
echo Generating non-normalized Bedgraphs first organism...
awk '$6 == "+"' ${file}_cerevisiae_sorted.bed | genomeCoverageBed -i stdin -3 -bg -g ${SCchrominfo} > ${file}_cerevisiae_plus.bedgraph 
awk '$6 == "-"' ${file}_cerevisiae_sorted.bed | genomeCoverageBed -i stdin -3 -bg -g ${SCchrominfo} > ${file}_cerevisiae_m.bedgraph
awk '{$4=$4*-1; print}' ${file}_cerevisiae_m.bedgraph > ${file}_cerevisiae_minus.bedgraph

echo Generating non-normalized Bedgraphs second organism...
awk '$6 == "+"' ${file}_pombe_sorted.bed | genomeCoverageBed -i stdin -3 -bg -g ${SPchrominfo} > ${file}_pombe_plus.bedgraph 
awk '$6 == "-"' ${file}_pombe_sorted.bed | genomeCoverageBed -i stdin -3 -bg -g ${SPchrominfo} > ${file}_pombe_m.bedgraph
awk '{$4=$4*-1; print}' ${file}_pombe_m.bedgraph > ${file}_pombe_minus.bedgraph

#Generate normalized Bedgraphs for both organisms
echo Normalizing bedgraphs organism 1...
a=$(awk '{ sum += $4 } END { print sum }' ${file}_cerevisiae_plus.bedgraph )
b=$(awk '{ sum += $4 } END { print sum }' ${file}_cerevisiae_minus.bedgraph )
d=$(($b*-1))
c=$(expr $a + $d)

echo $c | awk '{ c="'$c'"; printf "%s\t%s\t%s\t%s\n", $1, $2, $3, ($4*1000000)/c}' ${file}_cerevisiae_plus.bedgraph  > ${file}_cerevisiae_normed_plus.bedgraph
echo $c | awk '{ c="'$c'"; printf "%s\t%s\t%s\t%s\n", $1, $2, $3, ($4*1000000)/c}' ${file}_cerevisiae_minus.bedgraph  > ${file}_cerevisiae_normed_minus.bedgraph


echo Normalizing bedgraphs organism 2...
a=$(awk '{ sum += $4 } END { print sum }' ${file}_pombe_plus.bedgraph )
b=$(awk '{ sum += $4 } END { print sum }' ${file}_pombe_minus.bedgraph )
d=$(($b*-1))
c=$(expr $a + $d)

echo $c | awk '{ c="'$c'"; printf "%s\t%s\t%s\t%s\n", $1, $2, $3, ($4*1000000)/c}' ${file}_pombe_plus.bedgraph  > ${file}_pombe_normed_plus.bedgraph
echo $c | awk '{ c="'$c'"; printf "%s\t%s\t%s\t%s\n", $1, $2, $3, ($4*1000000)/c}' ${file}_pombe_minus.bedgraph  > ${file}_pombe_normed_minus.bedgraph

for bigwig in ${bgToBigWig}
do


#Make BigWig
#Faster on browser, Used to generate further analysis
echo Making BigWigs...
${bigwig} ${file}_cerevisiae_plus.bedgraph ${chr} ${file}_cerevisiae_plus.bw
${bigwig} ${file}_cerevisiae_minus.bedgraph ${chr} ${file}_cerevisiae_minus.bw

${bigwig} ${file}_pombe_plus.bedgraph ${chr} ${file}_pombe_plus.bw
${bigwig} ${file}_pombe_minus.bedgraph ${chr} ${file}_pombe_minus.bw

#rm *.tmp
rm ${file}_cerevisiae_m.bedgraph
rm ${file}_pombe_m.bedgraph
rm *.tmp
rm *.sam
rm *Unalign*
gzip ${file}


echo 'RibAlign\tRepeatRib\tRepeatGen\tAlign\tUnalign\tTotal' > ${file}_stat.log 
echo `awk 'FNR == 2 {print $9}' ${file}_rib.log` "\t" `awk 'FNR == 4 {print $9}' ${file}_rib.log` "\t" `awk 'FNR == 4 {print $9}' ${file}_gen.log` "\t" `awk 'FNR == 2 {print $9}' ${file}_gen.log` "\t" `awk 'FNR == 3 {print $7}' ${file}_gen.log` "\t" `awk 'FNR == 1 {print $4}' ${file}_rib.log`>> ${file}_stat.log


#hashtag or remove one "done" if no rDNA
done
done
done
done
done
done
done
done

## check for existence of subdirectories, make if non-existant 
if [ ! -d "./bed" ]; then 
mkdir "./bed"
fi
if [ ! -d "./bedgraph" ]; then 
mkdir "./bedgraph"
fi
if [ ! -d "./logs" ]; then 
mkdir "./logs"
fi
if [ ! -d "./bw" ]; then 
mkdir "./bw"
fi
if [ ! -d "./bedgraph/bedgraph_FullRead" ]; then 
mkdir "./bedgraph/bedgraph_FullRead"
fi
if [ ! -d "./bw" ]; then 
mkdir "./bw"
fi
if [ ! -d "./bam" ]; then 
mkdir "./bam"
fi

## Move aligned files to corresponding directories
mv *.bed ./bed 
mv *.bw ./bw
mv *.bedgraph ./bedgraph 
mv *.log ./logs
mv *.txt ./logs 
mv *.bam* ./bam
mv *run* ./logs


