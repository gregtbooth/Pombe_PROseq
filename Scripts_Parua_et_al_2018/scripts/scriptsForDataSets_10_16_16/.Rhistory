rectangles=list(col=c(rgb(0,0,0.5), rgb(0,0,0.5), rgb(0,0.5,0)), size=2.7, height=0.8, border='white')),
type = 'l',
ylim = ylim,
col = c(rgb(0.5,0,0,0.9), rgb(0,0,0.5,0.9), rgb(0,0.5,0,0.9)),#, rgb(0,0,0,0.9)),  ## just add or take away colors to match number of samples in each panel
fill = c(rgb(0.5,0,0,0.3), rgb(0,0,0.5,0.3), rgb(0,0.5,0,0.3)),#, rgb(0,0,0,0.3)),
ylab = ylab,
xlab = xlab,
main = main,
aspect=1,
lwd=2.5,
par.settings = list(strip.background=list(col="lightgrey"),par.xlab.text=list(cex=1.1,font=2),par.ylab.text=list(cex=1.1,font=2),axis.text=list(cex=1)),
par.strip.text=list(cex=1,font=2),
upper = df$upper,
lower = df$lower,
panel = function(x, y, ...){
panel.grid(h=-1, v=-1)
panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)
panel.xyplot(x, y, ...)
})
print(result)
dev.off()
}
#####################################################################################################################
MetaData = FormatMetaData_lattice(wigset = wigset, bed_quantiles = PI_quantile_GL, halfWindow = 1000, step = 10, bwpath = bwpath)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,75), width = 10, height = 15)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,15), width = 10, height = 15)
head(MetaData)
tail(MetaData)
lattice_meta.proSeq = function(filename= "test.pdf", df, ylim = c(0, 10), main = NULL,
xlab = "Distance to TSS (bp)",  ylab = "Median PRO-seq intensity", width = 5, height = 5){
pdf(paste(fig_dir, filename), width = width, height = height)
result <- xyplot(mean ~ x | factor(decile, labels = c("PI quartile 1", "PI quartile 2", "PI quartile 3", "PI quartile 4")), data = df,
group = factor(sample, labels = c("DSIF", "GFP", "Untransfected")),
scales = list(tck=c(1,0),alternating = c(1,1),x=list(relation='free',axs='i'),
y=list(relation='free',axs='i')),
key=list(corner=c(0.98,0.85),padding.text=3,
text=list(c("DSIF", "GFP", "Untransfected"),col=c("black", "black", "black"), cex=0.8, font=2),
rectangles=list(col=c(rgb(0.5,0,0), rgb(0,0,0.5), rgb(0,0.5,0)), size=2.7, height=0.8, border='white')),
type = 'l',
ylim = ylim,
col = c(rgb(0.5,0,0,0.9), rgb(0,0,0.5,0.9), rgb(0,0.5,0,0.9)),#, rgb(0,0,0,0.9)),  ## just add or take away colors to match number of samples in each panel
fill = c(rgb(0.5,0,0,0.3), rgb(0,0,0.5,0.3), rgb(0,0.5,0,0.3)),#, rgb(0,0,0,0.3)),
ylab = ylab,
xlab = xlab,
main = main,
aspect=1,
lwd=2.5,
par.settings = list(strip.background=list(col="lightgrey"),par.xlab.text=list(cex=1.1,font=2),par.ylab.text=list(cex=1.1,font=2),axis.text=list(cex=1)),
par.strip.text=list(cex=1,font=2),
upper = df$upper,
lower = df$lower,
panel = function(x, y, ...){
panel.grid(h=-1, v=-1)
panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)
panel.xyplot(x, y, ...)
})
print(result)
dev.off()
}
#####################################################################################################################
MetaData = FormatMetaData_lattice(wigset = wigset, bed_quantiles = PI_quantile_GL, halfWindow = 1000, step = 10, bwpath = bwpath)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,15), width = 10, height = 15)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,15), width = 8, height = 10)
FormatMetaData_lattice <- function(wigset, bed_quantiles, halfWindow, step, bwpath = bwpath){
N = dim(wigset)[1]
df = data.frame(matrix(ncol = 8, nrow = 0), stringsAsFactors = F)
sampleNames = c()
for (i in 1:N){
#if (i == ceiling(N/2)){cat("* 50% complete ... \n")}
cat("* loading", i, "\n")
wigs = load.wigset(wigset, i, bwpath = bwpath) #this should give all the bigwig files
cat("* generating and combining all sample meta-plot data ...\n")
alldec_df = data.frame(matrix(ncol = 4, nrow = 0), stringsAsFactors = F)
for (ii in 1:length(bed_quantiles)){ ## this loop is needed because we have a list of gene lists based on PI quantiles.
meta= meta.subsample(bed_quantiles[[ii]], bigWig.plus = wigs[[1]], bigWig.minus = wigs[[2]],
step = step, at.TSS = T, halfWindow = halfWindow, do.sum = T)
metaNorm = meta.normalize(result = meta, scaleFactor = 1/as.numeric(wigs[[4]]))
dec_df = cbind(metaNorm[[4]], metaNorm[[3]], metaNorm[[2]], ii) ## make a df with a column noting the quantile
alldec_df = rbind.data.frame(alldec_df, dec_df)
}
sampleNames = c(sampleNames, wigs[[3]])
sampleVal = i ### index for later retrieval of sample name from sampleNames list.
xAxis = seq(from = -1*(halfWindow), to= halfWindow-step, by = step)
sample_df = cbind(xAxis, alldec_df, sampleVal)
df = rbind.data.frame(df, sample_df)
}
colnames(df) = c("x", "mean", "lower", "upper", 'decile', "sample")
# lastly I will replace values in the 'sample', 'treatment', and 'background' columns with actual names
#for (ii in 1:length(sampleNames)){
#  df$sample[df$sample == ii] <- sampleNames[ii]
#}
return(df)
}
MetaData = FormatMetaData_lattice(wigset = wigset, bed_quantiles = PI_quantile_GL, halfWindow = 1000, step = 10, bwpath = bwpath)
head(MetaData)
tail(MetaData)
lattice_meta.proSeq = function(filename= "test.pdf", df, ylim = c(0, 10), main = NULL,
xlab = "Distance to TSS (bp)",  ylab = "Median PRO-seq intensity", width = 5, height = 5){
pdf(paste(fig_dir, filename), width = width, height = height)
result <- xyplot(mean ~ x | factor(decile, labels = c("PI quartile 1", "PI quartile 2", "PI quartile 3", "PI quartile 4")), data = df,
group = factor(sample, labels = c("Untransfected", "GFP", "DSIF")),
scales = list(tck=c(1,0),alternating = c(1,1),x=list(relation='free',axs='i'),
y=list(relation='free',axs='i')),
key=list(corner=c(0.98,0.85),padding.text=3,
text=list(c("Untransfected", "GFP", "DSIF"),col=c("black", "black", "black"), cex=0.8, font=2),
rectangles=list(col=c(rgb(0.5,0,0), rgb(0,0,0.5), rgb(0,0.5,0)), size=2.7, height=0.8, border='white')),
type = 'l',
ylim = ylim,
col = c(rgb(0.5,0,0,0.9), rgb(0,0,0.5,0.9), rgb(0,0.5,0,0.9)),#, rgb(0,0,0,0.9)),  ## just add or take away colors to match number of samples in each panel
fill = c(rgb(0.5,0,0,0.3), rgb(0,0,0.5,0.3), rgb(0,0.5,0,0.3)),#, rgb(0,0,0,0.3)),
ylab = ylab,
xlab = xlab,
main = main,
aspect=1,
lwd=2.5,
par.settings = list(strip.background=list(col="lightgrey"),par.xlab.text=list(cex=1.1,font=2),par.ylab.text=list(cex=1.1,font=2),axis.text=list(cex=1)),
par.strip.text=list(cex=1,font=2),
upper = df$upper,
lower = df$lower,
panel = function(x, y, ...){
panel.grid(h=-1, v=-1)
panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)
panel.xyplot(x, y, ...)
})
print(result)
dev.off()
}
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,15), width = 8, height = 10)
getHeat.Data = function(bed, wigset, WT_PI_df, halfwindow = 1000, step = 10){
N = dim(wigset)[1]
result = list()
for (i in 1:N){
cat("* loading", i, "\n")
wigs = load.wigset(wigset, i, bwpath = bwpath) #this should give all the bigwig files
cat("* generating heat data for each sample...\n")
heatData = collect.many(bed, wigs[[1]], wigs[[2]], halfWindow = halfwindow, step = step, at.TSS=T, do.sum=T)
heatData = cbind(heatData, WT_PI_df[,13]) ### this column will be used for sorting genes (based on PI, etc.)
heatData_sorted = heatData[order(heatData[,dim(heatData)[2]], decreasing = T),]
heatData_norm = (heatData_sorted[, 1:dim(heatData_sorted)[2]-1])/as.numeric(wigs[[4]])
heatData_norm[heatData_norm == 0] <- 0.1 ## prevents dividing by zero when taking ratios later on
result[[i]] = heatData_norm
}
return(result)
}
AllHeatData = getHeat.Data(ObsTSS_Filt, wigset, Untransf_combined)
head(AllHeatData[[1]])
require(gplots)
my_palette = colorRampPalette(c('lightblue4','lightblue3','lightblue1','white','pink','salmon1','tomato4'))(299)
br = c(seq(-10,-3,length=50), seq(-2.9,-1,length=50), seq(-0.9,0,length=50), seq(0.1,1,length=50), seq(1.1,3,length=50), seq(3.1,10,length=50))
DrawHeat = function(heatData, filename = "heat.pdf", br=br){
pdf(file = paste(fig_dir, filename, sep = ""), width = 10, height = 10)
heatmap.2(as.matrix(heatData), Rowv = NA, Colv = NA,
dendrogram=c("none"), breaks = br, labRow = F, labCol= F,
col =  my_palette, symkey = F, symm=F, trace = c("none"),
key.title = "Fold Change", key.xlab = "log2(treated / untreated)",
key.ylab = "",
lmat = rbind(c(2,0),c(3,4),c(0,1)),
lwid = c(0.4,4),
lhei = c(0.4,1,4),
#key.par = list(cex = 1),
density.info = "none", useRaster = T)
dev.off()
}
DrawHeat(GFP_vs_Untransf_FC_heat, filename = "GFP_vs_UntransfFC_PIsort_heat.pdf", br=br)
DrawHeat(DSIF_vs_Untransf_FC_heat, filename = "DSIF_vs_UntransfFC_PIsort_heat.pdf", br=br)
DrawHeat(DSIF_vs_GFP_FC_heat, filename = "DSIF_vs_GFPFC_PIsort_heat.pdf", br=br)
GFP_vs_Untransf_FC_heat = log2(AllHeatData[[2]]/AllHeatData[[1]])
DSIF_vs_Untransf_FC_heat = log2(AllHeatData[[3]]/AllHeatData[[1]])
DSIF_vs_GFP_FC_heat = log2(AllHeatData[[3]]/AllHeatData[[2]])
#####################################################################################################################
# Draw heatmaps
require(gplots)
my_palette = colorRampPalette(c('lightblue4','lightblue3','lightblue1','white','pink','salmon1','tomato4'))(299)
br = c(seq(-10,-3,length=50), seq(-2.9,-1,length=50), seq(-0.9,0,length=50), seq(0.1,1,length=50), seq(1.1,3,length=50), seq(3.1,10,length=50))
DrawHeat = function(heatData, filename = "heat.pdf", br=br){
pdf(file = paste(fig_dir, filename, sep = ""), width = 10, height = 10)
heatmap.2(as.matrix(heatData), Rowv = NA, Colv = NA,
dendrogram=c("none"), breaks = br, labRow = F, labCol= F,
col =  my_palette, symkey = F, symm=F, trace = c("none"),
key.title = "Fold Change", key.xlab = "log2(treated / untreated)",
key.ylab = "",
lmat = rbind(c(2,0),c(3,4),c(0,1)),
lwid = c(0.4,4),
lhei = c(0.4,1,4),
#key.par = list(cex = 1),
density.info = "none", useRaster = T)
dev.off()
}
DrawHeat(GFP_vs_Untransf_FC_heat, filename = "GFP_vs_UntransfFC_PIsort_heat.pdf", br=br)
require(ggplot2)
untransf_PIdeciles = PI_quantile.genes(bed = ObsTSS_Filt, WT_df = Untransf_combined, quantiles = 10)
boxplot.quantiles <- function(QuantileList, filename = "PI_quantile_PRdensity_boxplot.pdf"){
res = matrix(ncol = 3)
colnames(res) <- c('PRdensity', "GBdensity", "quantile")
for (i in 1:length(QuantileList)){
df = as.matrix(cbind(QuantileList[[i]][,c(9,10)], i))
res = rbind(res, df)
}
result = as.data.frame(res[c(2:dim(res)[1]),])  ## remove first row since it's just NAs
result$quantile <- as.factor(result$quantile)
p <- ggplot(result, aes(x = quantile, y = log(PRdensity))) + geom_boxplot()
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = p, width = 10, height = 10)
}
boxplot.quantiles(untransf_PIdeciles)
boxplot.quantiles <- function(QuantileList, filename = "PI_quantile_GBdensity_boxplot.pdf"){
res = matrix(ncol = 3)
colnames(res) <- c('PRdensity', "GBdensity", "quantile")
for (i in 1:length(QuantileList)){
df = as.matrix(cbind(QuantileList[[i]][,c(9,10)], i))
res = rbind(res, df)
}
result = as.data.frame(res[c(2:dim(res)[1]),])  ## remove first row since it's just NAs
result$quantile <- as.factor(result$quantile)
p <- ggplot(result, aes(x = quantile, y = log(GBdensity))) + geom_boxplot()
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = p, width = 10, height = 10)
}
boxplot.quantiles(untransf_PIdeciles)
boxplot.quantiles <- function(QuantileList, filename = "PI_quantile_PRdensity_boxplot.pdf"){
res = matrix(ncol = 3)
colnames(res) <- c('PRdensity', "GBdensity", "quantile")
for (i in 1:length(QuantileList)){
df = as.matrix(cbind(QuantileList[[i]][,c(9,10)], i))
res = rbind(res, df)
}
result = as.data.frame(res[c(2:dim(res)[1]),])  ## remove first row since it's just NAs
result$quantile <- as.factor(result$quantile)
p <- ggplot(result, aes(x = quantile, y = log(PRdensity))) + geom_boxplot()
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = p, width = 5, height = 5)
}
boxplot.quantiles(untransf_PIdeciles)
boxplot.quantiles <- function(QuantileList, filename = "PI_quantile_GBdensity_boxplot.pdf"){
res = matrix(ncol = 3)
colnames(res) <- c('PRdensity', "GBdensity", "quantile")
for (i in 1:length(QuantileList)){
df = as.matrix(cbind(QuantileList[[i]][,c(9,10)], i))
res = rbind(res, df)
}
result = as.data.frame(res[c(2:dim(res)[1]),])  ## remove first row since it's just NAs
result$quantile <- as.factor(result$quantile)
p <- ggplot(result, aes(x = quantile, y = log(GBdensity))) + geom_boxplot()
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = p, width = 5, height = 5)
}
boxplot.quantiles(untransf_PIdeciles)
plotCDFs_PI = function(DMSOdat, PP1dat, geneList, filename = "test.pdf", ylab = "fraction of genes", xlab = "log10(Pause Index)"){
Ddat = merge(DMSOdat, geneList, by.x = 0, by.y = 4) ## filter out unused genes
Pdat = merge(PP1dat, geneList, by.x = 0, by.y = 4)
DMSO_PI = cbind(log10(Ddat[,14]), 1)
colnames(DMSO_PI) = c("PI", "treatment")
PP1_PI = cbind(log10(Pdat[,14]), 2)
colnames(PP1_PI) = c("PI", "treatment")
dat = data.frame(rbind(DMSO_PI, PP1_PI))
dat = as.data.frame(dat)
dat[dat[,2]==1, 2] = "DMSO"
dat[dat[,2]==2, 2] = "3MBPP1"
dat[,2] = as.factor(dat[,2])
#indx = dat[is.finite(dat[,1]),]
res = ggplot(dat, aes(x = PI, colour = treatment)) + stat_ecdf() +
labs(x = xlab, y = ylab) + xlim(-2,2)
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = res, width = 5, height = 5)
return(res)
}
# Compare CDFs for Pause Index between each treatment:
plotCDFs_PI = function(DMSOdat, PP1dat, geneList, filename = "test.pdf", ylab = "fraction of genes", xlab = "log10(Pause Index)"){
Ddat = merge(DMSOdat, geneList, by.x = 0, by.y = 4) ## filter out unused genes
Pdat = merge(PP1dat, geneList, by.x = 0, by.y = 4)
DMSO_PI = cbind(log10(Ddat[,14]), 1)
colnames(DMSO_PI) = c("PI", "treatment")
PP1_PI = cbind(log10(Pdat[,14]), 2)
colnames(PP1_PI) = c("PI", "treatment")
dat = data.frame(rbind(DMSO_PI, PP1_PI))
dat = as.data.frame(dat)
dat[dat[,2]==1, 2] = "DMSO"
dat[dat[,2]==2, 2] = "3MBPP1"
dat[,2] = as.factor(dat[,2])
#indx = dat[is.finite(dat[,1]),]
res = ggplot(dat, aes(x = PI, colour = treatment)) + stat_ecdf() +
labs(x = xlab, y = ylab) + xlim(-2,2)
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = res, width = 5, height = 5)
return(res)
}
Untransf_vs_GFP_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = GFP_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsGFP_PI_CDF.pdf", ylab = "fraction of genes", xlab = "log10(Pause Index)")
Untransf_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsDSIF_PI_CDF.pdf", ylab = "fraction of genes", xlab = "log10(Pause Index)")
plotCDFs_PI = function(DMSOdat, PP1dat, geneList, filename = "test.pdf", ylab = "fraction of genes",
xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "DSIF aptamer"){
Ddat = merge(DMSOdat, geneList, by.x = 0, by.y = 4) ## filter out unused genes
Pdat = merge(PP1dat, geneList, by.x = 0, by.y = 4)
DMSO_PI = cbind(log10(Ddat[,14]), 1)
colnames(DMSO_PI) = c("PI", "treatment")
PP1_PI = cbind(log10(Pdat[,14]), 2)
colnames(PP1_PI) = c("PI", "treatment")
dat = data.frame(rbind(DMSO_PI, PP1_PI))
dat = as.data.frame(dat)
dat[dat[,2]==1, 2] = sample1
dat[dat[,2]==2, 2] = sample2
dat[,2] = as.factor(dat[,2])
#indx = dat[is.finite(dat[,1]),]
res = ggplot(dat, aes(x = PI, colour = treatment)) + stat_ecdf() +
labs(x = xlab, y = ylab) + xlim(-2,2)
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = res, width = 5, height = 5)
return(res)
}
Untransf_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsDSIF_PI_CDF.pdf", ylab = "fraction of genes", xlab = "log10(Pause Index)")
head(Untransf_combined)
hist(Untransf_combined[,13])
hist(Untransf_combined[,13])
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
hist(Untransf_combined[,13])
hist(log(Untransf_combined[,13]))
hist(log(Untransf_combined[,13]), breaks = 50)
hist(log(GFP_combined[,13]), breaks = 50)
hist(log(DSIF_combined[,13]), breaks = 50)
summary(log(DSIF_combined[,13]))
summary(log(GFP_combined[,13]))
summary(log(Untransf_combined[,13]))
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles2.pdf", df = MetaData, ylim = c(0,2), width = 8, height = 10)
source("/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/scripts/GB_Functions.R")
library(bigWig)
fig_dir = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/analysis/figures/PI/03-07-18/"
dir.create(fig_dir)
bwpath = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/Sequencing_02-26-18/bw/"
infopath = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/dm6_info/"
countpath = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/analysis/countData/AllgenesObsTSS/"
#DEseq_Table_path = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/Fisher_collaboration/analysis/countData/AllGenesObsTSS/DESeqOutput/"
ObsTSS_Filt = read.table(file = paste(infopath, "FilteredGenes_Obs_NoOverlap.bed", sep = ""), stringsAsFactors = F)
Untransf_combined = read.table(file = paste(countpath, "Untransf_CombinedPIcountData.txt", sep = ""), head = T)
GFP_combined = read.table(file = paste(countpath, "GFP_CombinedPIcountData.txt", sep = ""), head = T)
DSIF_combined = read.table(file = paste(countpath, "DSIF_CombinedPIcountData.txt", sep = ""), head = T)
# function for returning change in PI from untreated to treated
PIchange_quantile.genes = function(bed, WT_df, quantiles = 4){
bed = merge(x = bed, y = WT_df[,c(18,13)], by.x = 'V4', by.y = 'row.names')
bed = bed[is.finite(bed[,8]) & bed[,8] > 0,][,c(2,3,4,1,5,6,7,8)]
quants = quantile(bed[,8], prob = seq(0,1, length = quantiles+1))
result = list()
for (i in 1: quantiles){
quantbed = bed[bed[,8] > quants[i] & bed[,8] < quants[i+1], ]
result[[i]] = quantbed
}
return(result)
}
# function returns a list of gene lists based on their PI decile (based on WT_DMSO Pausing indeces)
PI_quantile.genes = function(bed, WT_df, quantiles = 4){
bed = merge(x = bed, y = WT_df[,c(18,13,8,10)], by.x = 'V4', by.y = 'row.names')
bed = bed[is.finite(bed[,8]) & bed[,8] > 0,][,c(2,3,4,1,5,6,7,8,9,10)]
quants = quantile(bed[,8], prob = seq(0,1, length = quantiles+1))
result = list()
for (i in 1: quantiles){
quantbed = bed[bed[,8] > quants[i] & bed[,8] < quants[i+1], ]
result[[i]] = quantbed
}
return(result)
}
PI_quantile_GL = PI_quantile.genes(ObsTSS_Filt, Untransf_combined, quantiles = 4)
#####################################################################################################################
## prepare wig table
## load NormFactors:
## Note: for the treated mcs6-as sample I am only considering the second biological replicate rather than combined reps, due to artifacts of the 1st sample.
NFs = read.table(file = "/Users/gregorybooth/Google\ Drive/SEAGATE_EXP/JJR_DSIFaptamer_PROseq/analysis/countData/combinedNormFactors.txt", head = T)
wigset = rbind(c("CombinedReps/9267_8440_69836_HJNCHBGX5_JJR_L206_Untransf-COMBINED_TTAGGC_R1_plus.bw", "CombinedReps/9267_8440_69836_HJNCHBGX5_JJR_L206_Untransf-COMBINED_TTAGGC_R1_minus.bw", "Untransf_Combined", NFs[1, "spikeReads"]/100000),
c("CombinedReps/9267_8440_69840_HJNCHBGX5_JJR_L206_GFP-COMBINED_TAGCTT_R1_plus.bw", "CombinedReps/9267_8440_69840_HJNCHBGX5_JJR_L206_GFP-COMBINED_TAGCTT_R1_minus.bw", "GFP_Combined", NFs[2, "spikeReads"]/100000),
c("CombinedReps/9267_8440_69841_HJNCHBGX5_JJR_L206_DSIF-COMBINED_GGCTAC_R1_plus.bw", "CombinedReps/9267_8440_69841_HJNCHBGX5_JJR_L206_DSIF-COMBINED_GGCTAC_R1_minus.bw", "DSIF_Combined", NFs[3, "spikeReads"]/100000))
#####################################################################################################################
## Meta plot functions
load.wigset <- function(wigset, wigset_row, bwpath = bwpath) {
file = wigset[wigset_row, 1]
wig.p = NULL
if (file != "")
wig.p = load.bigWig(paste(bwpath, file, sep=''))
file = wigset[wigset_row, 2]
wig.m = NULL
if (file != "")
wig.m = load.bigWig(paste(bwpath, file, sep=''))
return(list(wig.p, wig.m, wigset[wigset_row, 3], wigset[wigset_row, 4]))
}
## formatting meta plots for lattice (genes are also split into quantiles)
FormatMetaData_lattice <- function(wigset, bed_quantiles, halfWindow, step, bwpath = bwpath){
N = dim(wigset)[1]
df = data.frame(matrix(ncol = 8, nrow = 0), stringsAsFactors = F)
sampleNames = c()
for (i in 1:N){
#if (i == ceiling(N/2)){cat("* 50% complete ... \n")}
cat("* loading", i, "\n")
wigs = load.wigset(wigset, i, bwpath = bwpath) #this should give all the bigwig files
cat("* generating and combining all sample meta-plot data ...\n")
alldec_df = data.frame(matrix(ncol = 4, nrow = 0), stringsAsFactors = F)
for (ii in 1:length(bed_quantiles)){ ## this loop is needed because we have a list of gene lists based on PI quantiles.
meta= meta.subsample(bed_quantiles[[ii]], bigWig.plus = wigs[[1]], bigWig.minus = wigs[[2]],
step = step, at.TSS = T, halfWindow = halfWindow, do.sum = T)
metaNorm = meta.normalize(result = meta, scaleFactor = 1/as.numeric(wigs[[4]]))
dec_df = cbind(metaNorm[[4]], metaNorm[[3]], metaNorm[[2]], ii) ## make a df with a column noting the quantile
alldec_df = rbind.data.frame(alldec_df, dec_df)
}
sampleNames = c(sampleNames, wigs[[3]])
sampleVal = i ### index for later retrieval of sample name from sampleNames list.
xAxis = seq(from = -1*(halfWindow), to= halfWindow-step, by = step)
sample_df = cbind(xAxis, alldec_df, sampleVal)
df = rbind.data.frame(df, sample_df)
}
colnames(df) = c("x", "mean", "lower", "upper", 'decile', "sample")
# lastly I will replace values in the 'sample', 'treatment', and 'background' columns with actual names
#for (ii in 1:length(sampleNames)){
#  df$sample[df$sample == ii] <- sampleNames[ii]
#}
return(df)
}
## meta plots with lattice
require(lattice)
my.panel.bands <-
function(x, y, upper, lower,
fill, col,
subscripts, ..., font, fontface)
{
upper <- upper[subscripts]
lower <- lower[subscripts]
panel.polygon(c(x, rev(x)), c(upper, rev(lower)),
col = fill, border = FALSE,
...)
}
lattice_meta.proSeq = function(filename= "test.pdf", df, ylim = c(0, 10), main = NULL,
xlab = "Distance to TSS (bp)",  ylab = "Median PRO-seq intensity", width = 5, height = 5){
pdf(paste(fig_dir, filename), width = width, height = height)
result <- xyplot(mean ~ x | factor(decile, labels = c("PI quartile 1", "PI quartile 2", "PI quartile 3", "PI quartile 4")), data = df,
group = factor(sample, labels = c("Untransfected", "GFP", "DSIF")),
scales = list(tck=c(1,0),alternating = c(1,1),x=list(relation='free',axs='i'),
y=list(relation='free',axs='i')),
key=list(corner=c(0.98,0.85),padding.text=3,
text=list(c("Untransfected", "GFP", "DSIF"),col=c("black", "black", "black"), cex=0.8, font=2),
rectangles=list(col=c(rgb(0.5,0,0), rgb(0,0,0.5), rgb(0,0.5,0)), size=2.7, height=0.8, border='white')),
type = 'l',
ylim = ylim,
col = c(rgb(0.5,0,0,0.9), rgb(0,0,0.5,0.9), rgb(0,0.5,0,0.9)),#, rgb(0,0,0,0.9)),  ## just add or take away colors to match number of samples in each panel
fill = c(rgb(0.5,0,0,0.3), rgb(0,0,0.5,0.3), rgb(0,0.5,0,0.3)),#, rgb(0,0,0,0.3)),
ylab = ylab,
xlab = xlab,
main = main,
aspect=1,
lwd=2.5,
par.settings = list(strip.background=list(col="lightgrey"),par.xlab.text=list(cex=1.1,font=2),par.ylab.text=list(cex=1.1,font=2),axis.text=list(cex=1)),
par.strip.text=list(cex=1,font=2),
upper = df$upper,
lower = df$lower,
panel = function(x, y, ...){
panel.grid(h=-1, v=-1)
panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)
panel.xyplot(x, y, ...)
})
print(result)
dev.off()
}
#####################################################################################################################
MetaData = FormatMetaData_lattice(wigset = wigset, bed_quantiles = PI_quantile_GL, halfWindow = 1000, step = 10, bwpath = bwpath)
MetaData = FormatMetaData_lattice(wigset = wigset, bed_quantiles = PI_quantile_GL, halfWindow = 1000, step = 10, bwpath = bwpath)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles.pdf", df = MetaData, ylim = c(0,10), width = 8, height = 10)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles_decY.pdf", df = MetaData, ylim = c(0,2), width = 8, height = 10)
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles_decYmore.pdf", df = MetaData, ylim = c(0,0.5), width = 8, height = 10)
require(ggplot2)
untransf_PIdeciles = PI_quantile.genes(bed = ObsTSS_Filt, WT_df = Untransf_combined, quantiles = 10)
boxplot.quantiles <- function(QuantileList, filename = "PI_quantile_GBdensity_boxplot.pdf"){
res = matrix(ncol = 3)
colnames(res) <- c('PRdensity', "GBdensity", "quantile")
for (i in 1:length(QuantileList)){
df = as.matrix(cbind(QuantileList[[i]][,c(9,10)], i))
res = rbind(res, df)
}
result = as.data.frame(res[c(2:dim(res)[1]),])  ## remove first row since it's just NAs
result$quantile <- as.factor(result$quantile)
p <- ggplot(result, aes(x = quantile, y = log(GBdensity))) + geom_boxplot()
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = p, width = 5, height = 5)
}
boxplot.quantiles(untransf_PIdeciles)
dim(PI_quantile_GL[[1]])
dim(PI_quantile_GL[[2]])
dim(PI_quantile_GL[[3]])
lattice_meta.proSeq(filename = "CompareTansfectionsByPauseIndexQuartiles1.pdf", df = MetaData, ylim = c(0,10), width = 5, height = 5)
plotCDFs_PI = function(DMSOdat, PP1dat, geneList, filename = "test.pdf", ylab = "fraction of genes",
xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "DSIF aptamer"){
Ddat = merge(DMSOdat, geneList, by.x = 0, by.y = 4) ## filter out unused genes
Pdat = merge(PP1dat, geneList, by.x = 0, by.y = 4)
DMSO_PI = cbind(log10(Ddat[,14]), 1)
colnames(DMSO_PI) = c("PI", "treatment")
PP1_PI = cbind(log10(Pdat[,14]), 2)
colnames(PP1_PI) = c("PI", "treatment")
dat = data.frame(rbind(DMSO_PI, PP1_PI))
dat = as.data.frame(dat)
dat[dat[,2]==1, 2] = sample1
dat[dat[,2]==2, 2] = sample2
dat[,2] = as.factor(dat[,2])
#indx = dat[is.finite(dat[,1]),]
res = ggplot(dat, aes(x = PI, colour = treatment)) + stat_ecdf() +
labs(x = xlab, y = ylab) + xlim(-2,2)
ggsave(filename = paste(fig_dir, filename, sep = ""), plot = res, width = 5, height = 5)
return(res)
}
## run script
Untransf_vs_GFP_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = GFP_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsGFP_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "GFP aptamer")
Untransf_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsDSIF_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "DSIF aptamer")
GFP_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = GFP_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsDSIF_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "GFP aptamer", sample2 = "DSIF aptamer")
Untransf_vs_GFP_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = GFP_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsGFP_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "GFP aptamer")
Untransf_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = Untransf_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "UntransfectedVsDSIF_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "Untransfected", sample2 = "DSIF aptamer")
GFP_vs_DSIF_PIcdf = plotCDFs_PI(DMSOdat = GFP_combined, PP1dat = DSIF_combined, geneList = ObsTSS_Filt, filename = "GFPVsDSIF_PI_CDF.pdf",
ylab = "fraction of genes", xlab = "log10(Pause Index)", sample1 = "GFP aptamer", sample2 = "DSIF aptamer")
dim(PI_quantile_GL[[1]])
